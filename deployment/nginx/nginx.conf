# server {
#   listen 80;

#   # Define upstream for backend services
#   upstream backend {
#     server backend1:5003;
#     server backend2:4999;
#     server backend3:5000;
#   }

#   # Forwards requests to the client (Next.js) app
#   location / {
#     proxy_pass http://client:3000;
#     proxy_http_version 1.1;
#     proxy_set_header Upgrade $http_upgrade;
#     proxy_set_header Connection 'upgrade';
#     proxy_set_header Host $host;
#     proxy_cache_bypass $http_upgrade;
#   }

#   # API Gateway - forward API requests to the appropriate backend
#   location /api/ {
#     proxy_pass http://backend;
#     proxy_http_version 1.1;
#     proxy_set_header Upgrade $http_upgrade;
#     proxy_set_header Connection 'upgrade';
#     proxy_set_header Host $host;
#     proxy_cache_bypass $http_upgrade;
#   }

#   # Catch-all for any other specific routes
#   location /assets/ {
#     proxy_pass http://client:3000/assets/;
#   }
# }

# server {
#     listen 80;
#     server_name your_vps_public_ip_or_domain;  # Optional: add if you have a domain, or use VPS public IP

#     # Define upstream for backend services (using Docker Compose service names)
#     upstream backend {
#         server cms-backend:5003;
#         server kpi-backend:4999;
#         server cms-data-layer-backend:5000;
#     }

#     # Routes requests to the frontend (Next.js)
#     location / {
#         proxy_pass http://cms-frontend:3000;  # Docker Compose service name
#         proxy_http_version 1.1;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection 'upgrade';
#         proxy_set_header Host $host;
#         proxy_cache_bypass $http_upgrade;
#     }

#     # API Gateway - forward API requests to the appropriate backend
#     location /api/ {
#         proxy_pass http://backend;  # Forward requests to backend upstream
#         proxy_http_version 1.1;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection 'upgrade';
#         proxy_set_header Host $host;
#         proxy_cache_bypass $http_upgrade;
#     }

#     # Catch-all for assets
#     location /assets/ {
#         proxy_pass http://cms-frontend:3000/assets/;  # Frontend service
#     }
# }


# server {
#   listen 80;

#   # Define upstream for backend services (using Docker Compose service names)
#   upstream backend {
#     server cms-backend:5003;
#     server kpi-backend:4999;
#     server cms-data-layer-backend:5000;
#   }

#   # Routes requests to the frontend (Next.js)
#   location / {
#     proxy_pass http://cms-frontend:3000;  # Docker Compose service name
#     proxy_http_version 1.1;
#     proxy_set_header Upgrade $http_upgrade;
#     proxy_set_header Connection 'upgrade';
#     proxy_set_header Host $host;
#     proxy_cache_bypass $http_upgrade;
#   }

#   # API Gateway - forward API requests to the appropriate backend
#   location /api/ {
#     proxy_pass http://backend;  # Forward requests to backend upstream
#     proxy_http_version 1.1;
#     proxy_set_header Upgrade $http_upgrade;
#     proxy_set_header Connection 'upgrade';
#     proxy_set_header Host $host;
#     proxy_cache_bypass $http_upgrade;
#   }

#   # Catch-all for assets
#   location /assets/ {
#     proxy_pass http://cms-frontend:3000/assets/;  # Frontend service
#   }
# }

# http {
#     # other http configurations...

#     server {
#         listen 80;

#         # Define upstream for backend services (using Docker Compose service names)
#         upstream backend {
#             server cms-backend:5003;
#             server kpi-backend:4999;
#             server cms-data-layer-backend:5000;
#         }

#         # Routes requests to the frontend (Next.js)
#         location / {
#             proxy_pass http://cms-frontend:3000;  # Docker Compose service name
#             proxy_http_version 1.1;
#             proxy_set_header Upgrade $http_upgrade;
#             proxy_set_header Connection 'upgrade';
#             proxy_set_header Host $host;
#             proxy_cache_bypass $http_upgrade;
#         }

#         # API Gateway - forward API requests to the appropriate backend
#         location /api/ {
#             proxy_pass http://backend;  # Forward requests to backend upstream
#             proxy_http_version 1.1;
#             proxy_set_header Upgrade $http_upgrade;
#             proxy_set_header Connection 'upgrade';
#             proxy_set_header Host $host;
#             proxy_cache_bypass $http_upgrade;
#         }

#         # Catch-all for assets
#         location /assets/ {
#             proxy_pass http://cms-frontend:3000/assets/;  # Frontend service
#         }
#     }
# }

events {
    worker_connections 1024;  # Start with 512 connections per worker
}

http {
    # Other HTTP configurations...


    # Define upstream for backend services (using Docker Compose service names)
    upstream backend {
        # server cms-backend:5003;
        server kpi-backend:4999;
        # server cms-data-layer-backend:5000; This directly runs on host now.
    }

    server {
        listen 80;

        # Routes requests to the frontend (Next.js)
        location / {
            proxy_pass http://cms-frontend:3000;  # Docker Compose service name
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        # API Gateway - forward API requests to the appropriate backend
        location /api/ {
            proxy_pass http://backend;  # Forward requests to backend upstream
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        location /cms/ {
            proxy_pass http://cms-backend:5003/cms/;  # Forward requests to backend upstream 
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        location /data-layer/ {
            proxy_pass http://host.docker.internal:5000/;  # Crucial for host access
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        # Catch-all for assets
        # location /assets/ {
        #     proxy_pass http://cms-frontend:3000/assets/;  # Frontend service
        # }
    }
}
